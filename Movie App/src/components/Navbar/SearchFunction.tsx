import { useState, useEffect } from "react";
import useDebounce from "../../services/useDebounce";
import { getMulti } from "../../services/tmdbService";
import Navbar from "./Navbar";
import { Card, CardContent, CardMedia, Typography } from "@material-ui/core";
// Aqu√≠ tienes los pasos detallados para implementar la barra de b√∫squeda con debounce en tu app. **No incluir√© c√≥digo, solo explicaciones detalladas.**  

// ---

// ### üìÇ **Estructura de archivos**  
// Para mantener el c√≥digo organizado, trabajaremos con los siguientes archivos:  
// 1. **`tmdbService.ts`** ‚Üí Encargado de hacer las peticiones a la API de TMDB.  
// 2. **`useDebounce.ts`** ‚Üí Custom hook para aplicar debounce a la b√∫squeda.  
// 3. **`SearchBar.tsx`** ‚Üí Componente que maneja el input de b√∫squeda.  
// 4. **`Navbar.tsx`** ‚Üí Componente donde se usa `SearchBar` y se conecta con la b√∫squeda.  

// ---

// ### üõ† **Pasos detallados**  

// #### üîπ **1. Crear la funci√≥n para hacer la b√∫squeda en la API (`tmdbService.ts`)**  
// - Este archivo se encargar√° de hacer la petici√≥n a la API de TMDB.  
// - Debe usar **Axios** y reutilizar la instancia que ya tienes (`tmdbApi`).  
// - Se crear√° una funci√≥n llamada `searchMovies` que reciba como par√°metro el texto de b√∫squeda (`query`).  
// - La funci√≥n usar√° el **endpoint** `/search/multi` para obtener resultados que incluyan pel√≠culas, series y personas.  

// ---

// #### üîπ **2. Crear un custom hook para el debounce (`useDebounce.ts`)**  
// - Usaremos un **hook personalizado (`useDebounce`)** para retrasar la ejecuci√≥n de la b√∫squeda mientras el usuario sigue escribiendo.  
// - El debounce evita hacer llamadas a la API en cada pulsaci√≥n de tecla y mejora el rendimiento.  
// - Este hook tomar√° un valor (`value`, en este caso el texto ingresado en la b√∫squeda) y devolver√° una versi√≥n "retrasada" de ese valor.  
// - Se aplicar√° un **delay** de aproximadamente 300-500ms.  

// ---

// #### üîπ **3. Crear el componente `SearchBar.tsx`**  
// - Este componente contendr√° el input donde el usuario escribe la b√∫squeda.  
// - Debe tener:  
//   - Un **estado local (`searchQuery`)** que almacene el valor del input.  
//   - Un **`onChange`** que actualice el estado en cada cambio.  
//   - La funci√≥n de debounce aplicada al estado.  
//   - Un `onSubmit` que prevenga el comportamiento por defecto del formulario.  
// - Se debe **exportar** este componente para usarlo en `Navbar.tsx`.  

// ---

// #### üîπ **4. Conectar `SearchBar.tsx` con `Navbar.tsx`**  
// - Importar `SearchBar` dentro de `Navbar.tsx`.  
// - Crear un **estado global (`searchResults`)** en `Navbar.tsx` para almacenar los resultados de la API.  
// - Pasar una **funci√≥n `onSearch`** como prop a `SearchBar` para manejar la b√∫squeda en `Navbar`.  
// - Cuando el usuario escriba algo, `SearchBar` enviar√° la b√∫squeda a `Navbar`, que har√° la petici√≥n a la API con `searchMovies`.  
// - Mostrar los resultados en una secci√≥n debajo de la barra de b√∫squeda (en una `Grid` de MUI con `Card`).  

// ---

// #### üîπ **5. Manejar los resultados y mostrar la informaci√≥n en pantalla**  
// - Una vez obtenidos los resultados de la API en `Navbar.tsx`, se deben almacenar en el estado `searchResults`.  
// - Mapear los resultados para mostrar en una `Grid` de **MUI** con **`Card`**, donde cada resultado tenga:  
//   - Imagen de la pel√≠cula o serie.  
//   - T√≠tulo.  
//   - Fecha de lanzamiento (opcional).  
//   - Al hacer click en un resultado, se navega a una p√°gina con m√°s detalles.  

// ---

// ### üéØ **Resumen del flujo de datos**  
// 1. El usuario escribe en el `input` de `SearchBar.tsx`.  
// 2. La funci√≥n `handleInputChange` actualiza el estado `searchQuery`.  
// 3. Se aplica `useDebounce`, retrasando la petici√≥n a la API.  
// 4. Cuando el texto estabiliza, se llama `onSearch(query)`, enviando el valor a `Navbar.tsx`.  
// 5. `Navbar.tsx` recibe el valor y llama a `searchMovies(query)`, obteniendo los resultados de TMDB.  
// 6. Los resultados se almacenan en `searchResults` y se Renderizar en pantalla.  

// ---

// Si todo esto est√° claro, dime qu√© punto quieres implementar primero y lo haremos paso a paso. üöÄ

export interface Movie {
    id: number; 
    title: string;
    backdrop_path: string;
}

export function SearchMulti() {
  //Query es como se llama el texto de b√∫squeda SEG√öN EL API, tambi√©n es lo que usaba antes de usar debounce
    const [searchQuery, setSearchQuery] = useState(""); // string, ya que es el valor del input
    const [searchResults, setSearchResults] = useState<Movie[]>([]); // Cambiar el tipo de estado a Movie[]
    const debouncedQuery = useDebounce(searchQuery, 500); // 500ms de retraso
    //"Envolver" searchQuery en debouncedQuery para aplicar el retraso

    const handleSearchMulti = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSearchQuery(event.target.value);
    }
   
    useEffect(() => {
        async function fetchSearch() {
            const data  = await getMulti(debouncedQuery); // se necesita pasar searchQuery como argumento
            console.log("data multi recibida:", data);
            setSearchResults(data || []);
        }
        
        fetchSearch();
    }, [debouncedQuery]); // 'searchQuery' o 'debounce' se incluye como dependencia para que se actualice al cambiar = [searchQuery]

    /**
     * Preguntar sobre esto
     * Actualmente, useEffect est√° mal optimizado porque no tiene un array de dependencias. Hay que corregir eso.
     */

    return (
        <>
        <Navbar debouncedQuery={handleSearchMulti} /> 
        {/* Aqu√≠ se mostrar√°n los resultados de la b√∫squeda */}  
          {searchResults.map((result) => (
            <Card key={result.id} style={{ maxWidth: 340 }}>
              <CardMedia>
                <img
                  src={`https://image.tmdb.org/t/p/w500${result.backdrop_path}`}
                  alt="movie"
                ></img>
              </CardMedia>
              <CardContent>
                <Typography variant="h5" component="div">
                  {result.title}
                </Typography>
              </CardContent>
            </Card>
          ))} 
        </>
    )
}

export default SearchMulti;



/** 
 * NUEVO ERROR
 * La funci√≥n no presenta ninguna alerta, 
 * sin embargo no se muestra el resultado de la b√∫squeda 
 * en la pantalla o consola. ¬øQu√© podr√≠a estar fallando? 
 * 
 * Estamos obteniendo algo de la api?
 * El c√≥digo para Renderizar en pantalla esta correcto?
 * Necesitamos un bot√≥n para hacer la b√∫squeda?
 * Por que la b√∫squeda no funciona al presionar enter?
 * RESUELTO:
 *  Error encontrado: pase handleSearchMulti como prop a Navbar, pero tambi√©n hab√≠a que hacerlo en App.tsx
 * ----------------------------------------------------
 * NUEVO ERROR
 * Debounce no retrasa lo que se escribe en consola
 * */